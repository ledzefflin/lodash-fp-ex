{"version":3,"file":"lodash-fp-ex.es.js","sources":["../lib/index.js"],"sourcesContent":["import _ from 'lodash/fp';\n\n/**\n * 대상 인자가 promise(thenable)인지 여부\n * @param {*} x\n */\nconst isPromise = (x) => _.isFunction(_.get('then', x)) && _.isFunction(_.get('catch', x));\n\nconst fnPromisify = (fn, ...args) => {\n  return new Promise((resolve, reject) => {\n    try {\n      resolve(fn(...args));\n    } catch (e) {\n      reject(e);\n    }\n  });\n};\n\n/**\n * 대상 인자를 promise로 wrapping\n */\nconst promisify = (a, ...args) => {\n  const cond = _.cond([\n    [_.isFunction, () => fnPromisify(a, ...args)],\n    [isPromise, _.identity],\n    [_.T, (a) => Promise.resolve(a)]\n  ]);\n  const result = cond(a);\n\n  return result;\n};\n\n/**\n * promise가 또다른 promise를 resolve하는 경우, promise의 중첩을 제거하기 위한 helper 함수\n *\n * @param {*} thenable\n */\nconst flatPromise = (thenable) =>\n  isPromise(thenable) ? thenable.then((x) => flatPromise(x)) : thenable;\n\n/**\n * lodash 형태의 promise then\n */\nconst then = _.curry((fn, thenable) => promisify(thenable).then(flatPromise(fn)));\n\n/**\n * lodash 형태의 promise catch\n */\nconst otherwise = _.curry((fn, thenable) => promisify(thenable).catch(flatPromise(fn)));\n\n/**\n * lodash 형태의 promise finally\n */\nconst _finally = _.curry((fn, thenable) => promisify(thenable).finally(flatPromise(fn)));\n\n/**\n * invert boolean\n * @param {*} x\n */\nconst not = (x) => !x;\n\n/**\n * 대상이 비어있지 않은지 여부\n */\nconst isNotEmpty = _.pipe(_.isEmpty, not);\n\n/**\n * 대상 인자를 boolean 타입으로 변환\n * (예외)'true'문자열이면 true, 'false'문자열이면 false)\n *\n * @param {*} a\n */\nconst toBool = (a) =>\n  _.cond([\n    [_.equals('true'), _.T],\n    [_.equals('false'), _.F],\n    [_.T, (a) => !!a]\n  ])(a);\n\n/**\n * 삼항식 helper 함수\n * (isTrue가 true면 t(실행)반환, false면 f(실행)반환)\n */\nconst ternary = _.curry((t, f, isTrue) => {\n  if (isTrue) {\n    return _.isFunction(t) ? t() : t;\n  } else {\n    return _.isFunction(f) ? f() : f;\n  }\n});\n\n/**\n * a인자가 t타입인지 여부\n */\nconst instanceOf = _.curry((t, a) => a instanceof t);\n\n/**\n * 대상 문자열을 pascalcase 문자열로 변환\n */\nconst pascalCase = _.pipe(_.camelCase, _.upperFirst);\n\n/**\n * (collection) _.map의 비동기 함수\n * mapper 함수로 비동기 함수를 받아서 처리해준다.\n */\nconst mapAsync = _.curry(async (asyncMapper, arr) => {\n  const composer = _.pipe(_.flatMapDeep(_.pipe(asyncMapper, promisify)), async (a) =>\n    Promise.all(a)\n  );\n  const result = composer(arr);\n\n  return result;\n});\n\n/**\n * (collection) _.filter의 비동기 함수\n * 필터함수로 비동기 함수를 받아서 처리해준다.\n */\nconst filterAsync = _.curry(async (asyncFilter, arr) => {\n  const composer = _.pipe(\n    mapAsync(async (item) => ((await asyncFilter(item)) ? item : false)),\n    then(_.filter(_.pipe(_.equals(false), not)))\n  );\n  const result = await composer(arr);\n\n  return result;\n});\n/**\n * (collection) _.find의 비동기 함수\n */\nconst findAsync = _.curry(async (asyncFn, arr) => {\n  const composer = _.pipe(\n    mapAsync(asyncFn),\n    then(_.indexOf(true)),\n    then((idx) => _.get(`[${idx}]`, arr)),\n    otherwise(_.always(undefined))\n  );\n  const result = await composer(arr);\n\n  return result;\n});\n\n/**\n * asyncFn의 시작은 await accPromise가 되어야 한다.\n * 순차적으로 실행된다.\n * (ex 300ms이 걸리는 5개의 promise가 있다면, 최소 1500ms+alpah의 시간이 소요된다.\n * 상기의 mapAsync의 경우 300+alpah의 시간만 소요된다.(Promise.all과 Promise.resolve의 차이))\n */\nconst reduceAsync = _.curry((asyncFn, initAcc, dest) => {\n  const initAccPromise = Promise.resolve(initAcc);\n  const result = _.reduce(asyncFn, initAccPromise, dest);\n  return result;\n});\n\n/**\n * value로 object key 조회\n */\nconst key = _.curry((a, v) => {\n  const composer = _.pipe(_.invert, _.get(v));\n  const result = composer(a);\n  return result;\n});\n\n/**\n * 대상 문자열이 json형식 문자열인지 여부\n * @param {String} a\n */\nconst isJson = (a) => {\n  const composer = _.pipe(_.attempt, _.isError);\n  return _.isString(a) && !composer(() => JSON.parse(a));\n};\n\n/**\n * shallow freeze 보완\n * (대상 object의 refence 타입의 properties까지 object.freeze 처리)\n * @param {*} obj\n */\nconst deepFreeze = (obj) => {\n  const freezeRecursively = (v) => (isRef(v) && !Object.isFrozen(v) ? deepFreeze(v) : v);\n  const composer = _.pipe(Object.freeze, _.forOwn(freezeRecursively));\n  const result = composer(obj);\n\n  return result;\n};\n\nconst transformObjectKey = _.curry((transformFn, dest) => {\n  const convertRecursively = (dest) => {\n    const convertTo = (o) => {\n      const composer = _.pipe(\n        _.entries,\n        _.reduce((acc, [k, v]) => {\n          const cond = _.cond([\n            [_.isPlainObject, convertTo],\n            [_.isArray, (v) => _.map(cond, v)],\n            [_.T, _.identity]\n          ]);\n          const transformedKey = transformFn(k);\n          if (!_.has(transformedKey, acc)) {\n            acc[transformedKey] = cond(v);\n            return acc;\n          } else {\n            throw new Error(\n              `${transformedKey} already exist. duplicated property name is not supported.`\n            );\n          }\n        }, {})\n      );\n      const result = composer(o);\n      return result;\n    };\n    const result = convertTo(dest);\n    return result;\n  };\n\n  const result = _.isObject(dest) || _.isArray(dest) ? convertRecursively(dest) : dest;\n\n  return result;\n});\n\n/**\n * 대상 object의 property key문자열을 camelcase 문자열로 변환\n */\nconst toCamelcase = transformObjectKey(_.camelCase);\n\n/**\n * 대상 object의 property key문자열을 snakecase 문자열로 변환\n */\nconst toSnakecase = transformObjectKey(_.snakeCase);\n\n/**\n * date형식 문자열 여부\n * @param {string} str date형식 문자열\n */\nconst isDatetimeString = (str) => isNaN(str) && !isNaN(Date.parse(str));\n/**\n * applicative functor pattern 구현체\n * (주로 _.pipe함수에서 함수의 인자 순서를 변경하기 위해 사용)\n */\nconst ap = _.curry((a, curried) => curried(a));\n\n/**\n * 대상 인자가 undefined 또는 null이 아닌지 여부\n */\nconst isNotNil = _.pipe(_.isNil, not);\n\n/**\n * a인자를 인자로, evaluator함수 실행,\n * true면 trueHandler에 a인자 대입\n * false면 a 반환\n */\nconst ifT = _.curry((evaluator, trueHandler, a) => {\n  const isValidParams = _.every(_.isFunction, [evaluator, trueHandler]);\n\n  if (isValidParams) {\n    return _.pipe(evaluator, _.equals(true))(a) ? trueHandler(a) : a;\n  } else {\n    throw new Error('invalid parameter');\n  }\n});\n\n/**\n * a인자를 인자로, evaluator함수 실행,\n * false면 falseHandler에 a인자 대입\n * true면 a 반환\n */\nconst ifF = _.curry((evaluator, falseHandler, a) => {\n  const isValidParams = _.every(_.isFunction, [evaluator, falseHandler]);\n\n  if (isValidParams) {\n    return _.pipe(evaluator, _.equals(false))(a) ? falseHandler(a) : a;\n  } else {\n    throw new Error('invalid parameter(s)');\n  }\n});\n\n/**\n * arr인자 배열에 a인자가 포함되지 않았는지 여부\n */\nconst notIncludes = _.curry((a, arr) => {\n  const composer = _.pipe(_.includes, ap(arr), not);\n  const result = composer(a);\n\n  return result;\n});\n\n/**\n * a인자와 b인자가 다른지 여부 (deep equal)\n */\nconst notEquals = _.curry((a, b) => _.pipe(_.equals(a), not)(b));\n\n/**\n * arr인자의 idx인자의 index에 해당하는 요소 제거\n */\nconst removeByIndex = _.curry((idx, arr) => {\n  if (_.isArray(arr)) {\n    const cloned = _.cloneDeep(arr);\n    cloned.splice(_.toNumber(idx), 1);\n\n    return cloned;\n  }\n  return arr;\n});\n\n/**\n * arr 인자의 마지막 요소 제거 (immutable)\n *\n * @param {*} arr\n */\nconst removeLast = (arr) => {\n  const nextArr = _.cloneDeep(arr);\n  nextArr.pop();\n\n  return nextArr;\n};\n\n/**\n * _.concat alias\n */\nconst append = _.concat;\n\n/**\n * array 인자의 (index상)앞쪽에 value인자를 추가\n */\nconst prepend = _.curry((array, value) =>\n  _.isArray(value) ? _.concat(value, array) : _.concat([value], array)\n);\n\n/**\n * key(index)를 포함한 _.map\n */\nconst mapWithKey = _.curry((f, a) => _.map.convert({ cap: false })(f, a));\n\n/**\n * key(index)를 포함한 reduce\n */\nconst reduceWithKey = _.curry((f, acc, a) => _.reduce.convert({ cap: false })(f, acc, a));\n\n/**\n * null, undefined, Boolean, Number, String\n *\n */\nconst isVal = (a) => _.isNil(a) || _.isBoolean(a) || _.isNumber(a) || _.isString(a);\n\n/**\n * Array, Object, Function\n */\nconst isRef = _.pipe(isVal, not);\n\nmodule.exports = {\n  mapAsync,\n  filterAsync,\n  reduceAsync,\n  findAsync,\n  promisify,\n  then,\n  andThen: then,\n  otherwise,\n  finally: _finally,\n\n  isPromise,\n  isNotEmpty,\n  isNotNil,\n  isJson,\n  notEquals,\n  isNotEqual: notEquals,\n  isVal,\n  isPrimitive: isVal,\n  isRef,\n  isReference: isRef,\n  not,\n  notIncludes,\n  toBool,\n\n  deepFreeze,\n  key,\n  keyByVal: key,\n\n  // string\n  transformObjectKey,\n  toCamelcase,\n  toCamelKey: toCamelcase,\n  toSnakecase,\n  toSnakeKey: toSnakecase,\n  pascalCase,\n  isDatetimeString,\n\n  ap,\n  instanceOf,\n\n  ternary,\n  ifT,\n  ifF,\n\n  // array\n  removeByIndex,\n  removeByIdx: removeByIndex,\n  removeLast,\n  append,\n  prepend,\n\n  mapWithKey,\n  mapWithIdx: mapWithKey,\n  reduceWithKey,\n  reduceWithIdx: reduceWithKey\n};\n"],"names":["isPromise","x","_","isFunction","get","promisify","a","args","cond","fn","Promise","resolve","reject","e","fnPromisify","identity","T","flatPromise","thenable","then","curry","otherwise","catch","_finally","finally","not","isNotEmpty","pipe","isEmpty","ternary","t","f","isTrue","instanceOf","pascalCase","camelCase","upperFirst","mapAsync","asyncMapper","arr","flatMapDeep","all","composer","filterAsync","asyncFilter","item","filter","equals","findAsync","asyncFn","indexOf","idx","always","undefined","reduceAsync","initAcc","dest","initAccPromise","reduce","key","v","invert","deepFreeze","obj","Object","freeze","forOwn","isRef","isFrozen","transformObjectKey","transformFn","isObject","isArray","convertTo","o","entries","acc","k","isPlainObject","map","transformedKey","has","Error","convertRecursively","toCamelcase","toSnakecase","snakeCase","ap","curried","isNotNil","isNil","ifT","evaluator","trueHandler","every","ifF","falseHandler","notIncludes","includes","notEquals","b","removeByIndex","cloned","cloneDeep","splice","toNumber","append","concat","prepend","array","value","mapWithKey","convert","cap","reduceWithKey","isVal","isBoolean","isNumber","isString","module","exports","andThen","isJson","attempt","isError","JSON","parse","isNotEqual","isPrimitive","isReference","toBool","F","keyByVal","toCamelKey","toSnakeKey","isDatetimeString","str","isNaN","Date","removeByIdx","removeLast","nextArr","pop","mapWithIdx","reduceWithIdx"],"mappings":"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"}