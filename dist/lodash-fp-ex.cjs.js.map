{"version":3,"file":"lodash-fp-ex.cjs.js","sources":["../lib/index.js"],"sourcesContent":["import _ from 'lodash/fp';\n\n/**\n * 대상 인자가 promise(thenable)인지 여부\n * @param {*} x\n */\nconst isPromise = (x) => _.isFunction(_.get('then', x)) && _.isFunction(_.get('catch', x));\n\nconst fnPromisify = (fn, ...args) => {\n  return new Promise((resolve, reject) => {\n    try {\n      resolve(fn(...args));\n    } catch (e) {\n      reject(e);\n    }\n  });\n};\n\n/**\n * 대상 인자를 promise로 wrapping\n */\nconst promisify = (a, ...args) => {\n  const cond = _.cond([\n    [_.isFunction, () => fnPromisify(a, ...args)],\n    [isPromise, _.identity],\n    [_.T, (a) => Promise.resolve(a)]\n  ]);\n  const result = cond(a);\n\n  return result;\n};\n\n/**\n * promise가 또다른 promise를 resolve하는 경우, promise의 중첩을 제거하기 위한 helper 함수\n *\n * @param {*} thenable\n */\nconst flatPromise = (thenable) =>\n  isPromise(thenable) ? thenable.then((x) => flatPromise(x)) : thenable;\n\n/**\n * lodash 형태의 promise then\n */\nconst then = _.curry((fn, thenable) => promisify(thenable).then(flatPromise(fn)));\n\n/**\n * lodash 형태의 promise catch\n */\nconst otherwise = _.curry((fn, thenable) => promisify(thenable).catch(flatPromise(fn)));\n\n/**\n * lodash 형태의 promise finally\n */\nconst _finally = _.curry((fn, thenable) => promisify(thenable).finally(flatPromise(fn)));\n\n/**\n * invert boolean\n * @param {*} x\n */\nconst not = (x) => !x;\n\n/**\n * 대상이 비어있지 않은지 여부\n */\nconst isNotEmpty = _.pipe(_.isEmpty, not);\n\n/**\n * 대상 인자를 boolean 타입으로 변환\n * (예외)'true'문자열이면 true, 'false'문자열이면 false)\n *\n * @param {*} a\n */\nconst toBool = (a) =>\n  _.cond([\n    [_.equals('true'), _.T],\n    [_.equals('false'), _.F],\n    [_.T, (a) => !!a]\n  ])(a);\n\n/**\n * 삼항식 helper 함수\n * (isTrue가 true면 t(실행)반환, false면 f(실행)반환)\n */\nconst ternary = _.curry((t, f, isTrue) => {\n  if (isTrue) {\n    return _.isFunction(t) ? t() : t;\n  } else {\n    return _.isFunction(f) ? f() : f;\n  }\n});\n\n/**\n * a인자가 t타입인지 여부\n */\nconst instanceOf = _.curry((t, a) => a instanceof t);\n\n/**\n * 대상 문자열을 pascalcase 문자열로 변환\n */\nconst pascalCase = _.pipe(_.camelCase, _.upperFirst);\n\n/**\n * (collection) _.map의 비동기 함수\n * mapper 함수로 비동기 함수를 받아서 처리해준다.\n */\nconst mapAsync = _.curry(async (asyncMapper, arr) => {\n  const composer = _.pipe(_.flatMapDeep(_.pipe(asyncMapper, promisify)), async (a) =>\n    Promise.all(a)\n  );\n  const result = composer(arr);\n\n  return result;\n});\n\n/**\n * (collection) _.filter의 비동기 함수\n * 필터함수로 비동기 함수를 받아서 처리해준다.\n */\nconst filterAsync = _.curry(async (asyncFilter, arr) => {\n  const composer = _.pipe(\n    mapAsync(async (item) => ((await asyncFilter(item)) ? item : false)),\n    then(_.filter(_.pipe(_.equals(false), not)))\n  );\n  const result = await composer(arr);\n\n  return result;\n});\n/**\n * (collection) _.find의 비동기 함수\n */\nconst findAsync = _.curry(async (asyncFn, arr) => {\n  const composer = _.pipe(\n    mapAsync(asyncFn),\n    then(_.indexOf(true)),\n    then((idx) => _.get(`[${idx}]`, arr)),\n    otherwise(_.always(undefined))\n  );\n  const result = await composer(arr);\n\n  return result;\n});\n\n/**\n * asyncFn의 시작은 await accPromise가 되어야 한다.\n * 순차적으로 실행된다.\n * (ex 300ms이 걸리는 5개의 promise가 있다면, 최소 1500ms+alpah의 시간이 소요된다.\n * 상기의 mapAsync의 경우 300+alpah의 시간만 소요된다.(Promise.all과 Promise.resolve의 차이))\n */\nconst reduceAsync = _.curry((asyncFn, initAcc, dest) => {\n  const initAccPromise = Promise.resolve(initAcc);\n  const result = _.reduce(asyncFn, initAccPromise, dest);\n  return result;\n});\n\n/**\n * value로 object key 조회\n */\nconst key = _.curry((v, a) => {\n  const composer = _.pipe(_.invert, _.get(v));\n  const result = composer(a);\n  return result;\n});\n\n/**\n * 대상 문자열이 json형식 문자열인지 여부\n * @param {String} a\n */\nconst isJson = (a) => {\n  const composer = _.pipe(_.attempt, _.isError);\n  return _.isString(a) && !composer(() => JSON.parse(a));\n};\n\n/**\n * shallow freeze 보완\n * (대상 object의 refence 타입의 properties까지 object.freeze 처리)\n * @param {*} obj\n */\nconst deepFreeze = (obj) => {\n  const freezeRecursively = (v) =>\n    (_.isPlainObject(v) || _.isFunction(v)) && !Object.isFrozen(v) ? deepFreeze(v) : v;\n  const composer = _.pipe(Object.freeze, _.forOwn(freezeRecursively));\n  const result = composer(obj);\n\n  return result;\n};\n\nconst objectKeyTarnsform = _.curry((transformFn, dest) => {\n  const convertRecursively = (dest) => {\n    const convertTo = (o) => {\n      const composer = _.pipe(\n        _.entries,\n        _.reduce((acc, [k, v]) => {\n          const cond = _.cond([\n            [_.isPlainObject, convertTo],\n            [_.isArray, (v) => _.map(cond, v)],\n            [_.T, _.identity]\n          ]);\n          acc[transformFn(k)] = cond(v);\n          return acc;\n        }, {})\n      );\n      const result = composer(o);\n      return result;\n    };\n    const result = convertTo(dest);\n    return result;\n  };\n\n  const result = _.isObject(dest) || _.isArray(dest) ? convertRecursively(dest) : dest;\n\n  return result;\n});\n\n/**\n * 대상 object의 property key문자열을 camelcase 문자열로 변환\n */\nconst toCamelcase = objectKeyTarnsform(_.camelCase);\n\n/**\n * 대상 object의 property key문자열을 snakecase 문자열로 변환\n */\nconst toSnakecase = objectKeyTarnsform(_.snakeCase);\n\n/**\n * date형식 문자열 여부\n * @param {string} str date형식 문자열\n */\nconst isDateString = (str) => isNaN(str) && !isNaN(Date.parse(str));\n/**\n * applicative functor pattern 구현체\n * (주로 _.pipe함수에서 함수의 인자 순서를 변경하기 위해 사용)\n */\nconst ap = _.curry((a, curried) => curried(a));\n\n/**\n * 대상 인자가 undefined 또는 null이 아닌지 여부\n */\nconst isNotNil = _.pipe(_.isNil, not);\n\n/**\n * a인자를 인자로, evaluator함수 실행,\n * true면 trueHandler에 a인자 대입\n * false면 a 반환\n */\nconst ifT = _.curry((evaluater, trueHandler, a) => {\n  const isValidParams = _.every(_.isFunction, [evaluater, trueHandler]);\n\n  if (isValidParams) {\n    return _.pipe(evaluater, toBool)(a) ? trueHandler(a) : a;\n  } else {\n    throw new Error('invalid parameter(s)');\n  }\n});\n\n/**\n * a인자를 인자로, evaluator함수 실행,\n * false면 falseHandler에 a인자 대입\n * true면 a 반환\n */\nconst ifF = _.curry((evaluater, falseHandler, a) => {\n  const isValidParams = _.every(_.isFunction, [evaluater, falseHandler]);\n\n  if (isValidParams) {\n    return _.pipe(evaluater, toBool)(a) ? a : falseHandler(a);\n  } else {\n    throw new Error('invalid parameter(s)');\n  }\n});\n\n/**\n * arr인자 배열에 a인자가 포함되지 않았는지 여부\n */\nconst notIncludes = _.curry((a, arr) => {\n  const composer = _.pipe(_.includes, ap(arr), not);\n  const result = composer(a);\n\n  return result;\n});\n\n/**\n * a인자와 b인자가 다른지 여부 (deep equal)\n */\nconst notEquals = _.curry((a, b) => _.pipe(_.equals(a), _.not)(b));\n\n/**\n * arr인자의 idx인자의 index에 해당하는 요소 제거\n */\nconst removeByIndex = _.curry((idx, arr) => {\n  if (_.isArray(arr)) {\n    const cloned = _.cloneDeep(arr);\n    cloned.splice(_.toNumber(idx), 1);\n\n    return cloned;\n  }\n  return arr;\n});\n\n/**\n * arr 인자의 마지막 요소 제거 (immutable)\n *\n * @param {*} arr\n */\nconst removeLast = (arr) => {\n  const nextArr = _.cloneDeep(arr);\n  nextArr.pop();\n\n  return nextArr;\n};\n\n/**\n * _.concat alias\n */\nconst append = _.concat;\n\n/**\n * array 인자의 (index상)앞쪽에 value인자를 추가\n */\nconst prepend = _.curry((array, value) =>\n  _.isArray(value) ? _.concat(value, array) : _.concat([value], array)\n);\n\n/**\n * key(index)를 포함한 _.map\n */\nconst mapWithKey = _.curry((f, a) => a.map(f));\n\n/**\n * key(index)를 포함한 reduce\n */\nconst reduceWithKey = _.curry((f, acc, a) => a.reduce(f, acc));\n\nmodule.exports = {\n  mapAsync,\n  filterAsync,\n  reduceAsync,\n  findAsync,\n  promisify,\n  then,\n  otherwise,\n  finally: _finally,\n\n  isPromise,\n  isNotEmpty,\n  isNotNil,\n  isJson,\n  notEquals,\n  not,\n  notIncludes,\n  toBool,\n\n  deepFreeze,\n  key,\n\n  // string\n  pascalCase,\n  toCamelcase,\n  toSnakecase,\n  isDateString,\n\n  ap,\n  instanceOf,\n\n  ternary,\n  ifT,\n  ifF,\n\n  // array\n  removeByIndex,\n  removeLast,\n  append,\n  prepend,\n\n  mapWithKey,\n  reduceWithKey\n};\n"],"names":["isPromise","x","_","isFunction","get","promisify","a","args","cond","fn","Promise","resolve","reject","e","fnPromisify","identity","T","flatPromise","thenable","then","curry","otherwise","catch","_finally","finally","not","isNotEmpty","pipe","isEmpty","toBool","equals","F","ternary","t","f","isTrue","instanceOf","pascalCase","camelCase","upperFirst","mapAsync","asyncMapper","arr","flatMapDeep","all","composer","filterAsync","asyncFilter","item","filter","findAsync","asyncFn","indexOf","idx","always","undefined","reduceAsync","initAcc","dest","initAccPromise","reduce","key","v","invert","deepFreeze","obj","Object","freeze","forOwn","isPlainObject","isFrozen","objectKeyTarnsform","transformFn","isObject","isArray","convertTo","o","entries","acc","k","map","convertRecursively","toCamelcase","toSnakecase","snakeCase","ap","curried","isNotNil","isNil","ifT","evaluater","trueHandler","every","Error","ifF","falseHandler","notIncludes","includes","notEquals","b","removeByIndex","cloned","cloneDeep","splice","toNumber","append","concat","prepend","array","value","mapWithKey","reduceWithKey","module","exports","isJson","attempt","isError","isString","JSON","parse","isDateString","str","isNaN","Date","removeLast","nextArr","pop"],"mappings":"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"}