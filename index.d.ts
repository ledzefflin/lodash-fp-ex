/// <reference types="lodash" />
import fp from 'lodash/fp';
import { F } from 'ts-toolbelt';
declare type Tthen = F.Curry<(fn: (response: any) => any, thenable: Promise<any>) => Promise<any>>;
declare type Totherwise = F.Curry<(failureHandler: (error: Error | any) => never | any, thenable: Promise<Error | any>) => Promise<never | any>>;
declare type Tfinally = F.Curry<(callback: (...args: any[]) => any, thenable: Promise<any>) => Promise<any>>;
declare type Tternary = F.Curry<(<T>(evaluator: (arg: T) => boolean | any, trueHandler: (arg: T) => any, falseHandler: (arg: T) => any, arg: T) => any)>;
declare type TifT = F.Curry<(<T, R>(evaluator: (arg: T) => boolean | boolean, trueHandler: (arg: T) => R | R, arg: T) => T | R)>;
declare type TifF = F.Curry<(<T, R>(evaluator: (arg: T) => boolean | boolean, falseHandler: (arg: T) => R | R, arg: T) => T | R)>;
declare type TinstanceOf = F.Curry<(<T>(t: any, arg: T) => boolean)>;
declare type TmapAsync = F.Curry<(<T, K extends keyof T, R>(asyncMapper: (arg: T[K], key: K) => Promise<R>, collection: T) => Promise<R[]>)>;
declare type TfilterAsync = F.Curry<(<T, K extends keyof T, R>(asyncFilter: (arg: T[K], key: K) => Promise<boolean>, collection: T) => Promise<R[]>)>;
declare type TfindAsync = F.Curry<(<T, K extends keyof T, R>(asyncFilter: (arg: T[K], key: K) => Promise<boolean>, collection: T) => Promise<R>)>;
declare type TreduceAsync = F.Curry<(<T, K extends keyof T>(asyncFn: (acc: any, arg: T[K], key: K) => Promise<any>, initAcc: Promise<any> | any, collection: T) => Promise<any>)>;
declare type Tkey = F.Curry<(obj: Record<string, any>, value: any) => string>;
declare type TtransformObjectKey = F.Curry<(transformFn: (orignStr: string) => string, obj: Record<string, any>) => Record<string, any>>;
declare type Tap = F.Curry<(arg: any, curried: Function) => any>;
declare type TnotIncludes = F.Curry<(arg: any, targetArray: any[] | Record<string, any> | string) => boolean>;
declare type TnotEquals = F.Curry<(a: any, b: any) => boolean>;
declare type TremoveByIndex = F.Curry<(<R>(index: number | string, targetArray: R[]) => R[])>;
declare type Tprepend = F.Curry<(<T>(arr: T[], arg: T | T[]) => T[])>;
declare type TmapWithKey = F.Curry<(<T, K extends keyof T, R>(iteratee: (value: T[K], key: K) => R, collection: T) => R[])>;
declare type TforEachWithKey = F.Curry<(<T, K extends keyof T, R>(iteratee: (value: T[K], key: K) => R, collection: T) => R[])>;
declare type TreduceWithKey = F.Curry<(<T, K extends keyof T, R>(iteratee: (acc: R, value: T[K], key: K) => R, acc: R, collection: T) => R)>;
declare const _default: {
    mapAsync: TmapAsync;
    filterAsync: TfilterAsync;
    reduceAsync: TreduceAsync;
    findAsync: TfindAsync;
    forEachAsync: (...args: any[]) => any;
    promisify: (a: any, ...args: any[]) => Promise<any>;
    then: Tthen;
    andThen: Tthen;
    otherwise: Totherwise;
    catch: Totherwise;
    finally: Tfinally;
    isPromise: <T>(x: T) => boolean;
    isNotEmpty: (a: any) => boolean;
    isNotNil: (arg: any) => boolean;
    isJson: (jsonStr: string) => boolean;
    notEquals: TnotEquals;
    isNotEqual: TnotEquals;
    isVal: (arg: any) => boolean;
    isPrimitive: (arg: any) => boolean;
    isRef: (arg: any) => boolean;
    isReference: (arg: any) => boolean;
    not: <T_1>(x: T_1) => boolean;
    notIncludes: TnotIncludes;
    toBool: (arg: any) => boolean;
    deepFreeze: (obj: Record<string, any>) => Record<string, any>;
    key: Tkey;
    keyByVal: Tkey;
    transformObjectKey: TtransformObjectKey;
    toCamelcase: F.Curry<(obj: Record<string, any>) => Record<string, any>>;
    toCamelKey: F.Curry<(obj: Record<string, any>) => Record<string, any>>;
    toSnakecase: F.Curry<(obj: Record<string, any>) => Record<string, any>>;
    toSnakeKey: F.Curry<(obj: Record<string, any>) => Record<string, any>>;
    toPascalcase: F.Curry<(obj: Record<string, any>) => Record<string, any>>;
    pascalCase: (str: string) => string;
    isDatetimeString: (dateStr: string) => boolean;
    ap: Tap;
    instanceOf: TinstanceOf;
    ternary: Tternary;
    ifT: TifT;
    ifF: TifF;
    removeByIndex: TremoveByIndex;
    removeByIdx: TremoveByIndex;
    removeLast: (target: string | any[]) => string | any[];
    append: fp.LodashConcat;
    prepend: Tprepend;
    mapWithKey: TmapWithKey;
    mapWithIdx: TmapWithKey;
    forEachWithKey: TforEachWithKey;
    forEachWithIdx: TforEachWithKey;
    reduceWithKey: TreduceWithKey;
    reduceWithIdx: TreduceWithKey;
    isFalsy: (arg: any) => boolean;
    isTruthy: (arg: any) => boolean;
    getOr: import("lodash").CurriedFunction3<any, string, any, any>;
    delayAsync: (ms: number) => Promise<void>;
};
export default _default;
