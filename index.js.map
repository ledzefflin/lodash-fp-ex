{"version":3,"file":"index.js","sources":["lib/index.js"],"sourcesContent":["import _ from 'lodash/fp';\n\n/**\n * 대상 인자가 promise(thenable)인지 여부\n * @param {*} x\n */\nconst isPromise = (x) => _.isFunction(_.get('then', x)) && _.isFunction(_.get('catch', x));\n\nconst fnPromisify = (fn, ...args) =>\n  new Promise((resolve, reject) =>\n    fn(...args, (error, value) => (_.isNil(error) ? resolve(value) : reject(error)))\n  );\n\n/**\n * 대상 인자를 promise로 wrapping\n */\nconst promisify = _.cond([\n  [_.isFunction, (fn, ...args) => fnPromisify(fn, ...args)],\n  [isPromise, _.identity],\n  [_.T, (x) => Promise.resolve(x)]\n]);\n\n/**\n * promise가 또다른 promise를 resolve하는 경우, promise의 중첩을 제거하기 위한 helper 함수\n *\n * @param {*} thenable\n */\nconst flatPromise = (thenable) =>\n  isPromise(thenable) ? thenable.then((x) => flatPromise(x)) : thenable;\n\n/**\n * lodash 형태의 promise then\n */\nconst then = _.curry((fn, thenable) => promisify(thenable).then(flatPromise(fn)));\n\n/**\n * lodash 형태의 promise catch\n */\nconst otherwise = _.curry((fn, thenable) => promisify(thenable).catch(flatPromise(fn)));\n\n/**\n * lodash 형태의 promise finally\n */\nconst _finally = _.curry((fn, thenable) => promisify(thenable).finally(flatPromise(fn)));\n\n/**\n * invert boolean\n * @param {*} x\n */\nconst not = (x) => !x;\n\n/**\n * 대상이 비어있지 않은지 여부\n */\nconst isNotEmpty = _.pipe(_.isEmpty, not);\n\n/**\n * 대상 인자를 boolean 타입으로 변환\n * (예외)'true'문자열이면 true, 'false'문자열이면 false)\n *\n * @param {*} a\n */\nconst toBool = (a) =>\n  _.cond([\n    [_.equals('true'), _.T],\n    [_.equals('false'), _.F],\n    [_.T, (a) => !!a]\n  ])(a);\n\n/**\n * 삼항식 helper 함수\n * (isTrue가 true면 t(실행)반환, false면 f(실행)반환)\n */\nconst ternary = _.curry((t, f, isTrue) => {\n  if (isTrue) {\n    return _.isFunction(t) ? t() : t;\n  } else {\n    return _.isFunction(f) ? f() : f;\n  }\n});\n\n/**\n * a인자가 t타입인지 여부\n */\nconst instanceOf = _.curry((t, a) => a instanceof t);\n\n/**\n * 대상 문자열을 pascalcase 문자열로 변환\n */\nconst pascalCase = _.pipe(_.camelCase, _.upperFirst);\n\n/**\n * (collection) _.map의 비동기 함수\n */\nconst mapAsync = _.curry(async (asyncFn, arr) => await Promise.all(_.flatMapDeep(asyncFn, arr)));\n\n/**\n * (collection) _.filter의 비동기 함수\n */\nconst filterAsync = _.curry(async (asyncFn, arr) => await Promise.all(_.filter(asyncFn, arr)));\n\n/**\n * (collection) _.find의 비동기 함수\n */\nconst findAsync = _.curry(async (asyncFn, arr) => {\n  const composer = _.pipe(\n    mapAsync(asyncFn),\n    then(_.indexOf(true)),\n    then((idx) => _.get(`[${idx}]`, arr)),\n    otherwise(_.always(undefined))\n  );\n  const result = await composer(arr);\n\n  return result;\n});\n\n/**\n * asyncFn의 시작은 await accPromise가 되어야 한다.\n */\nconst reduceAsync = _.curry((asyncFn, initAcc, dest) => {\n  const initAccPromise = Promise.resolve(initAcc);\n  const result = _.reduce(asyncFn, initAccPromise, dest);\n  return result;\n});\n\n/**\n * value로 object key 조회\n */\nconst key = _.curry((v, a) => {\n  const composer = _.pipe(_.invert, _.get(v));\n  const result = composer(a);\n  return result;\n});\n\n/**\n * 대상 문자열이 json형식 문자열인지 여부\n * @param {String} a\n */\nconst isJson = (a) => {\n  const composer = _.pipe(_.attempt, _.isError);\n  return _.isString(a) && !composer(() => JSON.parse(a));\n};\n\n/**\n * shallow freeze 보완\n * (대상 object의 refence 타입의 properties까지 object.freeze 처리)\n * @param {*} obj\n */\nconst deepFreeze = (obj) => {\n  const freezeRecursively = (v) =>\n    (_.isPlainObject(v) || _.isFunction(v)) && !Object.isFrozen(v) ? deepFreeze(v) : v;\n  const composer = _.pipe(Object.freeze, _.forOwn(freezeRecursively));\n  const result = composer(obj);\n\n  return result;\n};\n\nconst objectKeyTarnsform = _.curry((transformFn, dest) => {\n  const convertRecursively = (dest) => {\n    const convertTo = (o) => {\n      const composer = _.pipe(\n        _.entries,\n        _.reduce((acc, [k, v]) => {\n          const cond = _.cond([\n            [_.isPlainObject, convertTo],\n            [_.isArray, (v) => _.map(cond, v)],\n            [_.T, _.identity]\n          ]);\n          acc[transformFn(k)] = cond(v);\n          return acc;\n        }, {})\n      );\n      const result = composer(o);\n      return result;\n    };\n    const result = convertTo(dest);\n    return result;\n  };\n\n  const result = _.isObject(dest) || _.isArray(dest) ? convertRecursively(dest) : dest;\n\n  return result;\n});\n\n/**\n * 대상 object의 property key문자열을 camelcase 문자열로 변환\n */\nconst toCamelcase = objectKeyTarnsform(_.camelCase);\n\n/**\n * 대상 object의 property key문자열을 snakecase 문자열로 변환\n */\nconst toSnakecase = objectKeyTarnsform(_.snakeCase);\n\n/**\n * date형식 문자열 여부\n * @param {string} str date형식 문자열\n */\nconst isDateString = (str) => isNaN(str) && !isNaN(Date.parse(str));\n/**\n * applicative functor pattern 구현체\n * (주로 _.pipe함수에서 함수의 인자 순서를 변경하기 위해 사용)\n */\nconst ap = _.curry((a, curried) => curried(a));\n\n/**\n * 대상 인자가 undefined 또는 null이 아닌지 여부\n */\nconst isNotNil = _.pipe(_.isNil, not);\n\n/**\n * a인자를 인자로, evaluator함수 실행,\n * true면 trueHandler에 a인자 대입\n * false면 a 반환\n */\nconst ifT = _.curry((evaluater, trueHandler, a) => {\n  const isValidParams = _.every(_.isFunction, [evaluater, trueHandler]);\n\n  if (isValidParams) {\n    return _.pipe(evaluater, toBool)(a) ? trueHandler(a) : a;\n  } else {\n    throw new Error('invalid parameter(s)');\n  }\n});\n\n/**\n * a인자를 인자로, evaluator함수 실행,\n * false면 falseHandler에 a인자 대입\n * true면 a 반환\n */\nconst ifF = _.curry((evaluater, falseHandler, a) => {\n  const isValidParams = _.every(_.isFunction, [evaluater, falseHandler]);\n\n  if (isValidParams) {\n    return _.pipe(evaluater, toBool)(a) ? a : falseHandler(a);\n  } else {\n    throw new Error('invalid parameter(s)');\n  }\n});\n\n/**\n * arr인자 배열에 a인자가 포함되지 않았는지 여부\n */\nconst notIncludes = _.curry((a, arr) => {\n  const composer = _.pipe(_.includes, ap(arr), not);\n  const result = composer(a);\n\n  return result;\n});\n\n/**\n * a인자와 b인자가 다른지 여부 (deep equal)\n */\nconst notEquals = _.curry((a, b) => _.pipe(_.equals(a), _.not)(b));\n\n/**\n * arr인자의 idx인자의 index에 해당하는 요소 제거\n */\nconst removeByIndex = _.curry((idx, arr) => {\n  if (_.isArray(arr)) {\n    arr.splice(idx, 1);\n    return _.cloneDeep(arr);\n  }\n  return arr;\n});\n\n/**\n * arr 인자의 마지막 요소 제거 (immutable)\n *\n * @param {*} arr\n */\nconst removeLast = (arr) => {\n  const nextArr = _.cloneDeep(arr);\n  nextArr.pop();\n\n  return nextArr;\n};\n\n/**\n * _.concat alias\n */\nconst append = _.concat;\n\n/**\n * array 인자의 (index상)앞쪽에 value인자를 추가\n */\nconst prepend = _.curry((array, value) =>\n  _.isArray(value) ? _.concat(value, array) : _.concat([value], array)\n);\n\n/**\n * key(index)를 포함한 _.map\n * (가급적 _.entries 사용 권장)\n */\nconst mapWithKey = _.map.convert({ cap: false });\n\n/**\n * key(index)를 포함한 reduce\n * (가급적 _.entries 사용 권장)\n */\nconst reduceWithKey = _.reduce.convert({ cap: false });\n\nmodule.exports = {\n  mapAsync,\n  filterAsync,\n  reduceAsync,\n  findAsync,\n  promisify,\n  then,\n  otherwise,\n  finally: _finally,\n\n  isPromise,\n  isNotEmpty,\n  isNotNil,\n  isJson,\n  notEquals,\n  not,\n  notIncludes,\n  toBool,\n\n  deepFreeze,\n  key,\n\n  // string\n  pascalCase,\n  toCamelcase,\n  toSnakecase,\n  isDateString,\n\n  ap,\n  instanceOf,\n\n  ternary,\n  ifT,\n  ifF,\n\n  // array\n  removeByIndex,\n  removeLast,\n  append,\n  prepend,\n\n  mapWithKey,\n  reduceWithKey\n};"],"names":["isPromise","x","_","isFunction","get","promisify","cond","fn","args","Promise","resolve","reject","error","value","isNil","fnPromisify","identity","T","flatPromise","thenable","then","curry","otherwise","catch","_finally","finally","not","isNotEmpty","pipe","isEmpty","toBool","a","equals","F","ternary","t","f","isTrue","instanceOf","pascalCase","camelCase","upperFirst","mapAsync","asyncFn","arr","all","flatMapDeep","filterAsync","filter","findAsync","composer","indexOf","idx","always","undefined","reduceAsync","initAcc","dest","initAccPromise","reduce","key","v","invert","deepFreeze","obj","Object","freeze","forOwn","isPlainObject","isFrozen","objectKeyTarnsform","transformFn","isObject","isArray","convertTo","o","entries","acc","k","map","convertRecursively","toCamelcase","toSnakecase","snakeCase","ap","curried","isNotNil","ifT","evaluater","trueHandler","every","Error","ifF","falseHandler","notIncludes","includes","notEquals","b","removeByIndex","splice","cloneDeep","append","concat","prepend","array","mapWithKey","convert","cap","reduceWithKey","module","exports","isJson","attempt","isError","isString","JSON","parse","isDateString","str","isNaN","Date","removeLast","nextArr","pop"],"mappings":"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"}