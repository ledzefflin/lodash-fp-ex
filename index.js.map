{"version":3,"file":"index.js","sources":["lib/index.js"],"sourcesContent":["import _ from 'lodash/fp';\n\n/**\n * 대상 인자가 promise(thenable)인지 여부\n * @param {*} x\n */\nconst isPromise = (x) => _.isFunction(_.get('then', x)) && _.isFunction(_.get('catch', x));\n\nconst fnPromisify = (fn, ...args) =>\n  new Promise((resolve, reject) =>\n    fn(...args, (error, value) => (_.isNil(error) ? resolve(value) : reject(error)))\n  );\n\n/**\n * 대상 인자를 promise로 wrapping\n */\nconst promisify = _.cond([\n  [_.isFunction, (fn, ...args) => fnPromisify(fn, ...args)],\n  [isPromise, _.identity],\n  [_.T, (x) => Promise.resolve(x)]\n]);\n\n/**\n * promise가 또다른 promise를 resolve하는 경우, promise의 중첩을 제거하기 위한 helper 함수\n *\n * @param {*} thenable\n */\nconst flatPromise = (thenable) =>\n  isPromise(thenable) ? thenable.then((x) => flatPromise(x)) : thenable;\n\n/**\n * lodash 형태의 promise then\n */\nconst then = _.curry((fn, thenable) => promisify(thenable).then(flatPromise(fn)));\n\n/**\n * lodash 형태의 promise catch\n */\nconst otherwise = _.curry((fn, thenable) => promisify(thenable).catch(flatPromise(fn)));\n\n/**\n * lodash 형태의 promise finally\n */\nconst _finally = _.curry((fn, thenable) => promisify(thenable).finally(flatPromise(fn)));\n\n/**\n * invert boolean\n * @param {*} x\n */\nconst not = (x) => !x;\n\n/**\n * 대상이 비어있지 않은지 여부\n */\nconst isNotEmpty = _.pipe(_.isEmpty, not);\n\n/**\n * 대상 인자를 boolean 타입으로 변환\n * (예외)'true'문자열이면 true, 'false'문자열이면 false)\n *\n * @param {*} a\n */\nconst toBool = (a) =>\n  _.cond([\n    [_.equals('true'), _.T],\n    [_.equals('false'), _.F],\n    [_.T, (a) => !!a]\n  ])(a);\n\n/**\n * 삼항식 helper 함수\n * (isTrue가 true면 t(실행)반환, false면 f(실행)반환)\n */\nconst ternary = _.curry((t, f, isTrue) => {\n  if (isTrue) {\n    return _.isFunction(t) ? t() : t;\n  } else {\n    return _.isFunction(f) ? f() : f;\n  }\n});\n\n/**\n * a인자가 t타입인지 여부\n */\nconst instanceOf = _.curry((t, a) => a instanceof t);\n\n/**\n * 대상 문자열을 pascalcase 문자열로 변환\n */\nconst pascalCase = _.pipe(_.camelCase, _.upperFirst);\n\n/**\n * (collection) _.map의 비동기 함수\n * mapper 함수로 비동기 함수를 받아서 처리해준다.\n */\nconst mapAsync = _.curry(async (asyncMapper, arr) => {\n  const composer = _.pipe(_.flatMapDeep(_.pipe(asyncMapper, promisify)), async (a) =>\n    Promise.all(a)\n  );\n  const result = composer(arr);\n\n  return result;\n});\n\n/**\n * (collection) _.filter의 비동기 함수\n * 필터함수로 비동기 함수를 받아서 처리해준다.\n */\nconst filterAsync = _.curry(async (asyncFilter, arr) => {\n  const composer = _.pipe(\n    mapAsync(async (item) => ((await asyncFilter(item)) ? item : false)),\n    then(_.filter(_.pipe(_.equals(false), not)))\n  );\n  const result = await composer(arr);\n\n  return result;\n});\n/**\n * (collection) _.find의 비동기 함수\n */\nconst findAsync = _.curry(async (asyncFn, arr) => {\n  const composer = _.pipe(\n    mapAsync(asyncFn),\n    then(_.indexOf(true)),\n    then((idx) => _.get(`[${idx}]`, arr)),\n    otherwise(_.always(undefined))\n  );\n  const result = await composer(arr);\n\n  return result;\n});\n\n/**\n * asyncFn의 시작은 await accPromise가 되어야 한다.\n * 순차적으로 실행된다.\n * (ex 300ms이 걸리는 5개의 promise가 있다면, 최소 1500ms+alpah의 시간이 소요된다.\n * 상기의 mapAsync의 경우 300+alpah의 시간만 소요된다.(Promise.all과 Promise.resolve의 차이))\n */\nconst reduceAsync = _.curry((asyncFn, initAcc, dest) => {\n  const initAccPromise = Promise.resolve(initAcc);\n  const result = _.reduce(asyncFn, initAccPromise, dest);\n  return result;\n});\n\n/**\n * value로 object key 조회\n */\nconst key = _.curry((v, a) => {\n  const composer = _.pipe(_.invert, _.get(v));\n  const result = composer(a);\n  return result;\n});\n\n/**\n * 대상 문자열이 json형식 문자열인지 여부\n * @param {String} a\n */\nconst isJson = (a) => {\n  const composer = _.pipe(_.attempt, _.isError);\n  return _.isString(a) && !composer(() => JSON.parse(a));\n};\n\n/**\n * shallow freeze 보완\n * (대상 object의 refence 타입의 properties까지 object.freeze 처리)\n * @param {*} obj\n */\nconst deepFreeze = (obj) => {\n  const freezeRecursively = (v) =>\n    (_.isPlainObject(v) || _.isFunction(v)) && !Object.isFrozen(v) ? deepFreeze(v) : v;\n  const composer = _.pipe(Object.freeze, _.forOwn(freezeRecursively));\n  const result = composer(obj);\n\n  return result;\n};\n\nconst objectKeyTarnsform = _.curry((transformFn, dest) => {\n  const convertRecursively = (dest) => {\n    const convertTo = (o) => {\n      const composer = _.pipe(\n        _.entries,\n        _.reduce((acc, [k, v]) => {\n          const cond = _.cond([\n            [_.isPlainObject, convertTo],\n            [_.isArray, (v) => _.map(cond, v)],\n            [_.T, _.identity]\n          ]);\n          acc[transformFn(k)] = cond(v);\n          return acc;\n        }, {})\n      );\n      const result = composer(o);\n      return result;\n    };\n    const result = convertTo(dest);\n    return result;\n  };\n\n  const result = _.isObject(dest) || _.isArray(dest) ? convertRecursively(dest) : dest;\n\n  return result;\n});\n\n/**\n * 대상 object의 property key문자열을 camelcase 문자열로 변환\n */\nconst toCamelcase = objectKeyTarnsform(_.camelCase);\n\n/**\n * 대상 object의 property key문자열을 snakecase 문자열로 변환\n */\nconst toSnakecase = objectKeyTarnsform(_.snakeCase);\n\n/**\n * date형식 문자열 여부\n * @param {string} str date형식 문자열\n */\nconst isDateString = (str) => isNaN(str) && !isNaN(Date.parse(str));\n/**\n * applicative functor pattern 구현체\n * (주로 _.pipe함수에서 함수의 인자 순서를 변경하기 위해 사용)\n */\nconst ap = _.curry((a, curried) => curried(a));\n\n/**\n * 대상 인자가 undefined 또는 null이 아닌지 여부\n */\nconst isNotNil = _.pipe(_.isNil, not);\n\n/**\n * a인자를 인자로, evaluator함수 실행,\n * true면 trueHandler에 a인자 대입\n * false면 a 반환\n */\nconst ifT = _.curry((evaluater, trueHandler, a) => {\n  const isValidParams = _.every(_.isFunction, [evaluater, trueHandler]);\n\n  if (isValidParams) {\n    return _.pipe(evaluater, toBool)(a) ? trueHandler(a) : a;\n  } else {\n    throw new Error('invalid parameter(s)');\n  }\n});\n\n/**\n * a인자를 인자로, evaluator함수 실행,\n * false면 falseHandler에 a인자 대입\n * true면 a 반환\n */\nconst ifF = _.curry((evaluater, falseHandler, a) => {\n  const isValidParams = _.every(_.isFunction, [evaluater, falseHandler]);\n\n  if (isValidParams) {\n    return _.pipe(evaluater, toBool)(a) ? a : falseHandler(a);\n  } else {\n    throw new Error('invalid parameter(s)');\n  }\n});\n\n/**\n * arr인자 배열에 a인자가 포함되지 않았는지 여부\n */\nconst notIncludes = _.curry((a, arr) => {\n  const composer = _.pipe(_.includes, ap(arr), not);\n  const result = composer(a);\n\n  return result;\n});\n\n/**\n * a인자와 b인자가 다른지 여부 (deep equal)\n */\nconst notEquals = _.curry((a, b) => _.pipe(_.equals(a), _.not)(b));\n\n/**\n * arr인자의 idx인자의 index에 해당하는 요소 제거\n */\nconst removeByIndex = _.curry((idx, arr) => {\n  if (_.isArray(arr)) {\n    const cloned = _.cloneDeep(arr);\n    cloned.splice(_.toNumber(idx), 1);\n\n    return cloned;\n  }\n  return arr;\n});\n\n/**\n * arr 인자의 마지막 요소 제거 (immutable)\n *\n * @param {*} arr\n */\nconst removeLast = (arr) => {\n  const nextArr = _.cloneDeep(arr);\n  nextArr.pop();\n\n  return nextArr;\n};\n\n/**\n * _.concat alias\n */\nconst append = _.concat;\n\n/**\n * array 인자의 (index상)앞쪽에 value인자를 추가\n */\nconst prepend = _.curry((array, value) =>\n  _.isArray(value) ? _.concat(value, array) : _.concat([value], array)\n);\n\n/**\n * key(index)를 포함한 _.map\n */\nconst mapWithKey = _.curry((f, a) => a.map(f));\n\n/**\n * key(index)를 포함한 reduce\n */\nconst reduceWithKey = _.curry((f, acc, a) => a.reduce(f, acc));\n\nmodule.exports = {\n  mapAsync,\n  filterAsync,\n  reduceAsync,\n  findAsync,\n  promisify,\n  then,\n  otherwise,\n  finally: _finally,\n\n  isPromise,\n  isNotEmpty,\n  isNotNil,\n  isJson,\n  notEquals,\n  not,\n  notIncludes,\n  toBool,\n\n  deepFreeze,\n  key,\n\n  // string\n  pascalCase,\n  toCamelcase,\n  toSnakecase,\n  isDateString,\n\n  ap,\n  instanceOf,\n\n  ternary,\n  ifT,\n  ifF,\n\n  // array\n  removeByIndex,\n  removeLast,\n  append,\n  prepend,\n\n  mapWithKey,\n  reduceWithKey\n};\n"],"names":["isPromise","x","_","isFunction","get","promisify","cond","fn","args","Promise","resolve","reject","error","value","isNil","fnPromisify","identity","T","flatPromise","thenable","then","curry","otherwise","catch","_finally","finally","not","isNotEmpty","pipe","isEmpty","toBool","a","equals","F","ternary","t","f","isTrue","instanceOf","pascalCase","camelCase","upperFirst","mapAsync","asyncMapper","arr","flatMapDeep","all","composer","filterAsync","asyncFilter","item","filter","findAsync","asyncFn","indexOf","idx","always","undefined","reduceAsync","initAcc","dest","initAccPromise","reduce","key","v","invert","deepFreeze","obj","Object","freeze","forOwn","isPlainObject","isFrozen","objectKeyTarnsform","transformFn","isObject","isArray","convertTo","o","entries","acc","k","map","convertRecursively","toCamelcase","toSnakecase","snakeCase","ap","curried","isNotNil","ifT","evaluater","trueHandler","every","Error","ifF","falseHandler","notIncludes","includes","notEquals","b","removeByIndex","cloned","cloneDeep","splice","toNumber","append","concat","prepend","array","mapWithKey","reduceWithKey","module","exports","isJson","attempt","isError","isString","JSON","parse","isDateString","str","isNaN","Date","removeLast","nextArr","pop"],"mappings":"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"}